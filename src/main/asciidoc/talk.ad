= Documentación de Arquitectura

:icons: font
:twitter-tag: ACCSA
:conference-tag:
:talk-tag: Docs Architecture
:linkattrs:

include::footer.ad[]

== Arquitectura como pre requisito icon:book[]

Conocida también como:

* Arquitectura del sistema

* Diseño de alto nivel

Descrita en el documento de:

* Especificación de arquitectura

== Arquitectura como pre requisito icon:book[]

La arquitectura y la construcción del sistema están relacionadas.

**La calidad de la arquitectura determina la integridad conceptual del sistema**

McConnell S. Code Complete

… Que a vez determina la calidad del sistema.

== Arquitectura como pre requisito icon:book[]

* Una buena arquitectura:
** provee la bases para el mantenimiento del sistema.
** facilita el desarrollo.
* Una mala arquitectura **complica** el desarrollo.

== !

image::good-idea.gif[width='50%']

== !

image::bad-idea.gif[width='50%']

== !

Sin una buena arquitectura:

* podemos tener el problema correcto pero la solución incorrecta.

* va ser muy difícil desarrollar la aplicación correctamente.

== Difícil de cambiar icon:bomb[]

Cambiar la arquitectura luego de iniciado el desarrollo es muy **costoso**.

* El tiempo necesario para cambiar un error en la arquitectura es del mismo orden que cambiar un requisito.

* Es más fácil cambiar la arquitectura al inicio del proyecto.

== Componentes de la arquitectura icon:graduation-cap[]

== Organización del programa icon:graduation-cap[]

* La arquitectura de un sistema requiere una descripción general.
* Las elecciones deben estar justificadas (tener un propósito).
* La arquitectura debe definir los componentes más importantes del sistema.
* Cada componente debe tener un rol en el sistema.

== Organización del programa icon:graduation-cap[]

* Se recomienda que cada componente conozca tan poco como pueda de los otros componentes y que maneje una sola responsabilidad.
* La comunicación entre cada bloque del sistema debe estar definida.
* La arquitectura debe describir las dependencias de cada bloque (directas/indirectas).

== Clases principales icon:lightbulb[]

* La arquitectura debe especificar cuales son las clases/sub-sistemas principales del sistema.

* No se requiere especificar el 100% de las clases. **Procura explicar el 20% de las clases que describan el otro 80%**.

== Diseño de datos icon:database[]

* Igual que con las clases, la arquitectura debe definir cuales son los archivos o tablas principales. Si hubieron alternativas, justificar el por qué de la elección.

* Las estructuras de datos también deben estar documentadas, por ejemplo si se usa una Lista o una Pila ¿por qué hubo preferencia entre una y otra?. Esta información es valiosa para el mantenimiento.

* La arquitectura debe mostrar en alto nivel la organización de datos y sus contenidos.

== Reglas de negocio icon:chart-area[]

* Si la arquitectura depende de las reglas de negocio, se debe explicar el impacto de ellas en el diseño del sistema.

== Diseño de interfaz de usuario icon:child[]

* La arquitectura debe definir el formato de las páginas web, de la línea de comandos o la interfaz gráfica.

* La arquitectura debe ser modularizada de tal manera que cambiar una interfaz de usuario no afecte las reglas de negocio del sistema.

== Administración de recursos icon:server[]

* La arquitectura debe describir un plan para administración de escasos recursos (conexión de bases de datos, threads, storage).

* Se deben evidenciar cuales recursos son necesarios y dimensionar cuánto de ellos se requiere para funcionamiento nominales o extremo del sistema.

== Seguridad icon:lock[]

* La arquitectura debe describir la seguridad a nivel de diseño y código del sistema.

* Las prácticas y convenciones de código del sistema deben considerar las recomendaciones de seguridad (validaciones, encriptación, manejo de buffer, mensajes de error y datos en memoria).

== Rendimiento icon:tachometer-alt[]

* Si el rendimiento es un requisito, la arquitectura debe indicar cuales son los objetivos en cuanto a rendimiento y evidenciar cuales funcionalidades pueden tener riesgos.

* En caso de selección de algoritmos o estructuras de datos específicos la arquitectura debe mencionarlo.

* Para cada caso se debe mencionar los costos y recursos asociados.

== Escalabilidad icon:superscript[]

* La arquitectura debe explicitar si es escalable o no. En caso que sí, se debe especificar como el sistema va manejarlo (más servidores, más storage, ¿en qué %?)

== Interoperabilidad icon:comments[]

* En caso que el sistema intercambie información con otros, la arquitectura debe especificar cómo lo hace (interfaces, protocolos).

== I18n / L10N icon:rupee-sign[] icon:arrows-alt-h[] icon:lira-sign[]

* Encoding, lenguajes soportados, actualización de mensajes sin modificar el código. La arquitectura debe especificar la estrategia escogida y justificarla.

== I/O icon:hdd[]

* La arquitectura debe especificar como se leen o se escriben datos.

== Procesamiento de errores icon:bug[]

* 90% del código de la aplicación puede generar excepciones.
* La arquitectura debe especificar que estrategia va seguirse para manejarlos apropiadamente.
* Pueden manejarse como parte de la convención del código.

== Procesamiento de errores icon:bug[]

* ¿Correctivo o de detección?
* ¿La detección va ser activo o pasiva? ¿Cómo afecta la UI?
* ¿Cómo se propagan los errores?
* ¿Cuáles son las convenciones para los mensajes de error?
* ¿Cómo se manejan las excepciones?

== Procesamiento de errores icon:bug[]

* ¿Cómo se manejan los errores dentro del código de la aplicación?
* ¿Cuál es el nivel de responsabilidad de cada clase para validar sus datos de entrada?
* ¿Cada clase es responsable de validar sus datos? ¿Un grupo de clases valida los datos del sistema?
* ¿Puede una clase asumir que los datos que recibe están limpios?
* ¿El manejo de excepciones se va hacer a través de librerías o de manera personalizada?

== Tolerancia a fallos icon:shield-alt[]

* Se debe especificar que tipo de tolerancia es tolerable por el sistema.
* ¿Existe backup? ¿Reintentos? Son preguntas que debe contestar la arquitectura.

== Viabilidad de la arquitectura icon:road[]

* La arquitectura debe demostrar que el sistema es viable.

* En caso que existan riesgos, investigaciones o prototipos que deban realizarse, deben ser evidenciados. Los riesgos deben ser mitigados o acordados antes de comenzar la construcción.

== Sobreingeniería icon:rocket[]

* En software, la cadena no es tan fuerte como su eslabón más débil; es tan débil como todos los enlaces débiles multiplicados juntos.

* La arquitectura debe claramente indicar donde los programadores deben evitar la sobre ingeniería e ir por la solución más simple.

== Decisiones de Comprar vs Desarrollar icon:dollar[] icon:arrows-h[] icon:book[]

* La solución más radical en el software es decidir desarrollar o no desarrollar. Por ejemplo comprando o usando librerías open-source.

* Si en la arquitectura se van a usar componentes que no existen, debe evidenciar cómo esos componentes serán mantenidos y si existen librerías por qué no se usaron.

== Decisiones de reusar icon:briefcase[]

* Si se reusan componentes se debe explicar como se van a usar y que puntos del sistema van a cubrir.

== Estrategia de cambio icon:code-branch[]

* La arquitectura debe explicar la estrategía para manejar los cambios.
* ¿Cuáles son la estrategia de versionado?
* ¿Hay cambios que pueden ser previstos? ¿Cuál es su efecto?
* ¿Cómo se manejan los cambios en la configuración? ¿Hardcode? ¿Base de datos? ¿Archivos?

== Calidad general de la arquitectura icon:lightbulb[]

* Una buena arquitectura explica las clases principales del sistema.
* La arquitectura debe tener un objetivo específico. No es la misma arquitectura la de un sistema pensado para performance que para modificación, incluso si ambos tienen la misma función.
* La arquitectura debe incluir justificaciones por las decisiones tomadas. No vale el **"siempre lo hemos hecho así"**.

== Calidad general de la arquitectura icon:lightbulb[]

* Una buena arquitectura no depende ni del entorno, ni del lenguaje utilizado. Si el sistema esta hecho para un hardware específico esto no aplica.
* La arquitectura debe manejar con equilibrio el sobre especificar y el no especificar el sistema.
* La arquitectura debe evidenciar los riesgos.
* La arquitectura debe incluir múltiples vistas del sistema.

== Checklist icon:list[]

https://github.com/earth001/talk-intro-documentation/blob/master/cc2e_checklists.pdf[cc2e_checklists pág. 6y7]

== Ejemplos icon:search[]

== Conclusiones icon:check-double[]

* Es importante diseñar antes de desarrollar.
* Sin una buena arquitectura se puede resolver el problema con la herramienta incorrecta.
* El costo de cambiar la arquitectura incrementa a medida que hay más desarrollo sobre ella.

include::self.ad[]
